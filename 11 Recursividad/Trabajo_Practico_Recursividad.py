#1-Crea una funci√≥n recursiva que calcule el factorial de un numero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

# Funci√≥n recursiva para calcular el factorial
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Solicitar al usuario un numero entero positivo
numero = int(input("Introduce un n√∫mero entero positivo: "))

# Verificaci√≥n de que el numero sea valido
if numero < 1:
    print("Por favor, introduce un n√∫mero entero mayor o igual a 1.")
else:
    print(f"Factoriales desde 1 hasta {numero}:")
    for i in range(1, numero + 1):
        print(f"{i}! = {factorial(i)}")

#//////////////////////////////////////////////////////////////////////////

#2-Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

# Funci√≥n recursiva para calcular el numero de Fibonacci en la posici√≥n n
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Solicitar al usuario la cantidad de t√©rminos de la serie de Fibonacci
posicion = int(input("Introduce la posici√≥n hasta la cual quieres ver la serie de Fibonacci: "))

# Verificamos que el numero sea v√°lido
if posicion < 0:
    print("Por favor, introduce un numero entero mayor o igual a 0.")
else:
    print(f"Serie de Fibonacci hasta la posici√≥n {posicion}:")
    for i in range(posicion + 1):
        print(f"F({i}) = {fibonacci(i)}")

#//////////////////////////////////////////////////////////////////////////

#3- Crea una funci√≥n recursiva que calcule la potencia de un numero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

# Funci√≥n recursiva para calcular n^m
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Solicitar base y exponente al usuario
base = float(input("Introduce la base: "))
exponente = int(input("Introduce el exponente (entero no negativo): "))

# Verificamos que el exponente sea v√°lido
if exponente < 0:
    print("Por favor, introduce un exponente entero no negativo.")
else:
    resultado = potencia(base, exponente)
    print(f"{base}^{exponente} = {resultado}")

#//////////////////////////////////////////////////////////////////////////

#4- Crear una funci√≥n recursiva en Python que reciba un numero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitar n√∫mero al usuario
numero = int(input("Introduce un numero entero positivo: "))

# Verificamos que sea v√°lido
if numero < 0:
    print("Por favor, introduce un numero entero positivo.")
elif numero == 0:
    print("Binario: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"El n√∫mero {numero} en binario es: {binario}")

#//////////////////////////////////////////////////////////////////////////

#5- Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
#Requisitos:
#La soluci√≥n debe ser recursiva.
#No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

#//////////////////////////////////////////////////////////////////////////

#6- Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
#Restricciones:
#No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
#Ejemplos:
#suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
#suma_digitos(9) ‚Üí 9
#suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Solicitar al usuario un n√∫mero entero positivo
numero = int(input("Introduce un numero entero positivo: "))

# Verificar que el numero sea v√°lido
if numero < 0:
    print("Por favor, introduce un numero positivo.")
else:
    resultado = suma_digitos(numero)
    print(f"La suma de los d√≠gitos de {numero} es: {resultado}")

#//////////////////////////////////////////////////////////////////////////

#7- Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

# Solicitar al usuario el n√∫mero de bloques en el nivel m√°s bajo
nivel_base = int(input("Introduce el n√∫mero de bloques en el nivel m√°s bajo: "))

# Verificar que el n√∫mero sea v√°lido
if nivel_base < 1:
    print("Por favor, introduce un n√∫mero entero mayor o igual a 1.")
else:
    total = contar_bloques(nivel_base)
    print(f"Se necesitan {total} bloques para construir la pir√°mide.")

#//////////////////////////////////////////////////////////////////////////

#8- Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    elif numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)

# Pedir datos al usuario
numero = int(input("Introduce un n√∫mero entero positivo: "))
digito = int(input("Introduce el d√≠gito que deseas contar (0-9): "))

# Verificar que los datos sean v√°lidos
if numero < 0 or digito < 0 or digito > 9:
    print("Datos inv√°lidos. Aseg√∫rate de ingresar un n√∫mero positivo y un d√≠gito entre 0 y 9.")
else:
    cantidad = contar_digito(numero, digito)
    print(f"El d√≠gito {digito} aparece {cantidad} veces en el n√∫mero {numero}.")

